
2622. Cache With Time Limit

Write a class that allows getting and setting key-value pairs, however a time until expiration is associated with each key.

The class has three public methods:

set(key, value, duration): accepts an integer key, an integer value, and a duration in milliseconds. Once the duration has elapsed, the key should be inaccessible. The method should return true if the same un-expired key already exists and false otherwise. Both the value and duration should be overwritten if the key already exists.

get(key): if an un-expired key exists, it should return the associated value. Otherwise it should return -1.

count(): returns the count of un-expired keys.

 

Example 1:

Input: 
actions = ["TimeLimitedCache", "set", "get", "count", "get"]
values = [[], [1, 42, 100], [1], [], [1]]
timeDelays = [0, 0, 50, 50, 150]
Output: [null, false, 42, 1, -1]
Explanation:
At t=0, the cache is constructed.
At t=0, a key-value pair (1: 42) is added with a time limit of 100ms. The value doesn't exist so false is returned.
At t=50, key=1 is requested and the value of 42 is returned.
At t=50, count() is called and there is one active key in the cache.
At t=100, key=1 expires.
At t=150, get(1) is called but -1 is returned because the cache is empty.
Example 2:

Input: 
actions = ["TimeLimitedCache", "set", "set", "get", "get", "get", "count"]
values = [[], [1, 42, 50], [1, 50, 100], [1], [1], [1], []]
timeDelays = [0, 0, 40, 50, 120, 200, 250]
Output: [null, false, true, 50, 50, -1, 0]
Explanation:
At t=0, the cache is constructed.
At t=0, a key-value pair (1: 42) is added with a time limit of 50ms. The value doesn't exist so false is returned.
At t=40, a key-value pair (1: 50) is added with a time limit of 100ms. A non-expired value already existed so true is returned and the old value was overwritten.
At t=50, get(1) is called which returned 50.
At t=120, get(1) is called which returned 50.
At t=140, key=1 expires.
At t=200, get(1) is called but the cache is empty so -1 is returned.
At t=250, count() returns 0 because the cache is empty.
 

Constraints:

0 <= key, value <= 109
0 <= duration <= 1000
1 <= actions.length <= 100
actions.length === values.length
actions.length === timeDelays.length
0 <= timeDelays[i] <= 1450
actions[i] is one of "TimeLimitedCache", "set", "get" and "count"
First action is always "TimeLimitedCache" and must be executed immediately, with a 0-millisecond delay

Solution JavaScript:
var TimeLimitedCache = function() {
    this.cache = new Map();
};

/** 
 * @param {number} key
 * @param {number} value
 * @param {number} duration time until expiration in ms
 * @return {boolean} if un-expired key already existed
 */
TimeLimitedCache.prototype.set = function(key, value, duration) {
    const now = Date.now();
    if (this.cache.has(key)) {
        this.cache.set(key, [value, now + duration]);
        return true;
    }
    this.cache.set(key, [value, now + duration]);
    return false;
};

/** 
 * @param {number} key
 * @return {number} value associated with key
 */
TimeLimitedCache.prototype.get = function(key) {
    const now = Date.now();
    if (this.cache.has(key)) {
        const [value, expiry] = this.cache.get(key);
        if (now < expiry) {
            return value;
        } else {
            this.cache.delete(key);
        }
    }
    return -1;
};

/** 
 * @return {number} count of non-expired keys
 */
TimeLimitedCache.prototype.count = function() {
    const now = Date.now();
    let count = 0;
    for (const [key, [_, expiry]] of this.cache) {
        if (now < expiry) {
            count++;
        } else {
            this.cache.delete(key);
        }
    }
    return count;
};
The TimeLimitedCache constructor initializes an object with a property cache which is a new Map. This map will store the key-value pairs along with their respective expiration times.

set function:

The set function takes three parameters: key, value, and duration. It sets the key-value pair in the cache and associates an expiration time with the key.
If the cache already has the given key, it updates the value and extends the expiration time by the specified duration. The function then returns true to indicate that the key already existed and was updated.
If the cache does not have the given key, it adds the key-value pair along with the expiration time to the cache and returns false to indicate that a new key was added.
get function:

The get function takes a key as an argument and retrieves the value associated with that key.
If the key is present in the cache and has not expired (the current time is less than the expiration time), the function returns the associated value.
If the key is present but has expired, it removes the key from the cache and returns -1 to indicate that the key has expired.
If the key is not present in the cache, the function returns -1.
count function:

The count function calculates the number of non-expired keys currently present in the cache.
It iterates through the Map and checks if the current time is less than the expiration time for each key-value pair.
If the current time is greater than or equal to the expiration time, it removes the key from the cache.
It returns the count of non-expired keys.
Solution TypeScript:
class TimeLimitedCache {
    cache: Map<number, [number, number]>
    
    constructor() {
        this.cache = new Map();
    }
    
    set(key: number, value: number, duration: number): boolean {
        const now = Date.now();
        if (this.cache.has(key)) {
            this.cache.set(key, [value, now + duration])
            return true;
        }
        this.cache.set(key, [value, now + duration])
        return false;
    }

    get(key: number): number {
        const now = Date.now();
        if (this.cache.has(key)) {
            const [value, expiry] = this.cache.get(key)!;
            if (now < expiry) {
                return value;
            } else {
                this.cache.delete(key);
            }
        }
        return -1;
    }

    count(): number {
        const now = Date.now();
        let count = 0;
        for (const [key, [_, expiry]] of this.cache) {
            if (now < expiry) {
                count++;
            } else {
                this.cache.delete(key);
            }
        }
        return count;
    }
}
TimeLimitedCache class:

The TimeLimitedCache class has a property cache, which is a map that stores key-value pairs along with their respective expiration times.
The constructor initializes the cache as a new Map.
set method:

The set method takes three parameters: key (number), value (number), and duration (number). It sets the key-value pair in the cache and associates an expiration time with the key.
If the cache already has the given key, it updates the value and extends the expiration time by the specified duration. The method then returns true to indicate that the key already existed and was updated.
If the cache does not have the given key, it adds the key-value pair along with the expiration time to the cache and returns false to indicate that a new key was added.
get method:

The get method takes a key (number) as an argument and retrieves the value associated with that key from the cache.
If the key is present in the cache and has not expired (the current time is less than the expiration time), the method returns the associated value.
If the key is present but has expired, it removes the key from the cache and returns -1 to indicate that the key has expired.
If the key is not present in the cache, the method returns -1.
count method:

The count method calculates the number of non-expired keys currently present in the cache.
It iterates through the Map and checks if the current time is less than the expiration time for each key-value pair.
If the current time is greater than or equal to the expiration time, it removes the key from the cache.
It returns the count of non-expired keys.
Link to problem:
https://leetcode.com/problems/cache-with-time-limit/description/?envType=study-plan-v2&envId=30-days-of-javascript

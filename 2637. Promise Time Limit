2637. Promise Time Limit

Given an asynchronous function fn and a time t in milliseconds, return a new time limited version of the input function. fn takes arguments provided to the time limited function.

The time limited function should follow these rules:

If the fn completes within the time limit of t milliseconds, the time limited function should resolve with the result.
If the execution of the fn exceeds the time limit, the time limited function should reject with the string "Time Limit Exceeded".
 

Example 1:

Input: 
fn = async (n) => { 
  await new Promise(res => setTimeout(res, 100)); 
  return n * n; 
}
inputs = [5]
t = 50
Output: {"rejected":"Time Limit Exceeded","time":50}
Explanation:
const limited = timeLimit(fn, t)
const start = performance.now()
let result;
try {
   const res = await limited(...inputs)
   result = {"resolved": res, "time": Math.floor(performance.now() - start)};
} catch (err) {
   result = {"rejected": err, "time": Math.floor(performance.now() - start)};
}
console.log(result) // Output

The provided function is set to resolve after 100ms. However, the time limit is set to 50ms. It rejects at t=50ms because the time limit was reached.
Example 2:

Input: 
fn = async (n) => { 
  await new Promise(res => setTimeout(res, 100)); 
  return n * n; 
}
inputs = [5]
t = 150
Output: {"resolved":25,"time":100}
Explanation:
The function resolved 5 * 5 = 25 at t=100ms. The time limit is never reached.
Example 3:

Input: 
fn = async (a, b) => { 
  await new Promise(res => setTimeout(res, 120)); 
  return a + b; 
}
inputs = [5,10]
t = 150
Output: {"resolved":15,"time":120}
Explanation:
​​​​The function resolved 5 + 10 = 15 at t=120ms. The time limit is never reached.
Example 4:

Input: 
fn = async () => { 
  throw "Error";
}
inputs = []
t = 1000
Output: {"rejected":"Error","time":0}
Explanation:
The function immediately throws an error.
 

Constraints:

0 <= inputs.length <= 10
0 <= t <= 1000
fn returns a promise

Solution JavaScript:
/**
 * @param {Function} fn
 * @param {number} t
 * @return {Function}
 */
var timeLimit = function(fn, t) {
    
 return async function(...args) {
        return new Promise((resolve, reject) => {
            const timer = setTimeout(() => {
                reject("Time Limit Exceeded")
            }, t)

            fn(...args)
                .then((result) => {
                    clearTimeout(timer)
                    resolve(result)
                })
                .catch((err) => {
                    clearTimeout(timer)
                    reject(err)
                })
        })
    }
};
async function(...args) { ... }: This line defines an asynchronous function that takes any number of arguments and returns a Promise.

return new Promise((resolve, reject) => { ... }: This line creates a new Promise that takes two arguments, resolve and reject,
which are used to fulfill or reject the promise based on the outcome of the asynchronous operation.

const timer = setTimeout(() => { reject("Time Limit Exceeded") }, t): This line sets up a timer using setTimeout that rejects the Promise with the message 
"Time Limit Exceeded" after the specified time t if the asynchronous operation has not completed.

fn(...args): This line invokes the provided function fn with the specified arguments args.

.then((result) => { ... }): This line handles the successful fulfillment of the Promise returned by the provided function fn.

clearTimeout(timer): This line clears the timer set by setTimeout to prevent it from triggering a rejection.

resolve(result): This line resolves the outer Promise with the result from the asynchronous operation.

.catch((err) => { ... }): This line handles any errors that occur during the execution of the provided function fn.

clearTimeout(timer): This line clears the timer set by setTimeout to prevent it from triggering a rejection.

reject(err): This line rejects the outer Promise with the error that occurred during the asynchronous operation.

The function returns a new function that wraps the original function fn with a time limit. This wrapper function returns a Promise that either resolves with the result of the operation or rejects with an error message if the operation takes longer than the specified time limit.

Solution TypeScript:
type Fn = (...params: any[]) => Promise<any>;

function timeLimit(fn: Fn, t: number): Fn {
    return async function (...args: any[]) {
        return new Promise((resolve, reject) => {
            const timer = setTimeout(() => {
                reject("Time Limit Exceeded");
            }, t);

            fn(...args)
                .then((result) => {
                    clearTimeout(timer);
                    resolve(result);
                })
                .catch((err) => {
                    clearTimeout(timer);
                    reject(err);
                });
        });
    };
}
async function (...args: any[]) { ... }: This line defines an asynchronous function that takes any number of arguments and returns a Promise.

return new Promise((resolve, reject) => { ... }: This line creates a new Promise that takes two arguments,
resolve and reject, which are used to fulfill or reject the promise based on the outcome of the asynchronous operation.

const timer = setTimeout(() => { reject("Time Limit Exceeded"); }, t);: This line sets up a timer using setTimeout that rejects the Promise with the message 
"Time Limit Exceeded" after the specified time t if the asynchronous operation has not completed.

fn(...args): This line invokes the provided function fn with the specified arguments args.

.then((result) => { ... }): This line handles the successful fulfillment of the Promise returned by the provided function fn.

clearTimeout(timer): This line clears the timer set by setTimeout to prevent it from triggering a rejection.

resolve(result): This line resolves the outer Promise with the result from the asynchronous operation.

.catch((err) => { ... }): This line handles any errors that occur during the execution of the provided function fn.

clearTimeout(timer): This line clears the timer set by setTimeout to prevent it from triggering a rejection.

reject(err): This line rejects the outer Promise with the error that occurred during the asynchronous operation.

The function returns a new function that wraps the original function fn with a time limit.
This wrapper function returns a Promise that either resolves with the result of the operation or rejects with an error message if the operation takes longer than the specified time limit.

Link to problem:
https://leetcode.com/problems/promise-time-limit/description/?envType=study-plan-v2&envId=30-days-of-javascript

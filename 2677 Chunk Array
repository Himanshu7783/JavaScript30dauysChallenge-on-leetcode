Problem:

Given an array arr and a chunk size size, return a chunked array.

A chunked array contains the original elements in arr, but consists of subarrays each of length size. 
 The length of the last subarray may be less than size if arr.length is not evenly divisible by size.

You may assume the array is the output of JSON.parse. In other words, it is valid JSON.

Please solve it without using lodash's _.chunk function.

 

Example 1:

Input: arr = [1,2,3,4,5], size = 1
Output: [[1],[2],[3],[4],[5]]
Explanation: The arr has been split into subarrays each with 1 element.
Example 2:

Input: arr = [1,9,6,3,2], size = 3
Output: [[1,9,6],[3,2]]
Explanation: The arr has been split into subarrays with 3 elements. However, only two elements are left for the 2nd subarray.
Example 3:

Input: arr = [8,5,3,2,6], size = 6
Output: [[8,5,3,2,6]]
Explanation: Size is greater than arr.length thus all elements are in the first subarray.
Example 4:

Input: arr = [], size = 1
Output: []
Explanation: There are no elements to be chunked so an empty array is returned.
 

Constraints:

arr is a valid JSON array
2 <= JSON.stringify(arr).length <= 105
1 <= size <= arr.length + 


Solution JavaScript:
/**
 * @param {Array} arr
 * @param {number} size
 * @return {Array}
 */
var chunk = function(arr, size) {
    const chunked = []
    let index = 0

    while (index < arr.length) {
        chunked.push(arr.slice(index, size + index))
        index += size
    }
    
    return chunked
};


Solution TypeScript:
type JSONValue = null | boolean | number | string | JSONValue[] | { [key: string]: JSONValue };
type Obj = Record<string, JSONValue> | Array<JSONValue>;

function chunk(arr: Obj[], size: number): Obj[][] {
 const chunked : Obj[][] = []
    let index : number = 0

    while (index < arr.length) {
        chunked.push(arr.slice(index, size + index))
        index += size
    }
    
    return chunked

};
The function initializes an empty array called chunked to store the chunks and sets the index variable to 0.

It uses a while loop to iterate over the arr array. During each iteration,
it extracts a chunk of the specified size from the arr array using the slice method, 
starting from the current index. The chunk is then pushed into the chunked array.

After each iteration, the index is incremented by the chunk size to move to the next chunk.

Finally, the function returns the chunked array containing the chunks of the original array.

Link to problem:
https://leetcode.com/problems/chunk-array/description/?envType=study-plan-v2&envId=30-days-of-javascript

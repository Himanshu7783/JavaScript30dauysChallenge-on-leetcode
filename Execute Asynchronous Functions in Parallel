2721. Execute Asynchronous Functions in Parallel

Given an array of asynchronous functions functions, return a new promise promise. Each function in the array accepts no arguments and returns a promise. All the promises should be executed in parallel.

promise resolves:

When all the promises returned from functions were resolved successfully in parallel.
The resolved value of promise should be an array of all the resolved values of promises in the same order as they were in the functions.
The promise should resolve when all the asynchronous functions in the array have completed execution in parallel.
promise rejects:

When any of the promises returned from functions were rejected. promise should also reject with the reason of the first rejection.
Please solve it without using the built-in Promise.all function.

 

Example 1:

Input: functions = [
  () => new Promise(resolve => setTimeout(() => resolve(5), 200))
]
Output: {"t": 200, "resolved": [5]}
Explanation: 
promiseAll(functions).then(console.log); // [5]

The single function was resolved at 200ms with a value of 5.
Example 2:

Input: functions = [
    () => new Promise(resolve => setTimeout(() => resolve(1), 200)), 
    () => new Promise((resolve, reject) => setTimeout(() => reject("Error"), 100))
]
Output: {"t": 100, "rejected": "Error"}
Explanation: Since one of the promises rejected, the returned promise also rejected with the same error at the same time.
Example 3:

Input: functions = [
    () => new Promise(resolve => setTimeout(() => resolve(4), 50)), 
    () => new Promise(resolve => setTimeout(() => resolve(10), 150)), 
    () => new Promise(resolve => setTimeout(() => resolve(16), 100))
]
Output: {"t": 150, "resolved": [4, 10, 16]}
Explanation: All the promises resolved with a value. The returned promise resolved when the last promise resolved.
 

Constraints:

functions is an array of functions that returns promises
1 <= functions.length <= 10

Solution JavaScript:
/**
 * @param {Array<Function>} functions
 * @return {Promise<any>}
 */
var promiseAll = function(functions) {
    return new Promise((resolve, reject) => {
        let results = []
        let counter = 0

        if (functions.length === 0) {
            resolve(results)
        }

        for (let i = 0; i < functions.length; i++) {
            functions[i]()
                .then(result => {
                    results[i] = result
                    counter++

                    if (counter === functions.length) {
                        resolve(results)
                    }
                })
                .catch(reason => {
                    reject(reason)
                })
        }
    })
};
return new Promise((resolve, reject) => { ... }): This line creates and returns a new Promise.

let results = [] and let counter = 0: These lines initialize an empty array results to store the results and a counter to keep track of the number of resolved functions.

if (functions.length === 0) { resolve(results) }: This part checks if the input array functions is empty. If it is, the function immediately resolves the Promise with an empty array.

The for loop iterates over each function in the functions array.

Inside the loop, each function is called with functions[i](). If a function resolves, the result is stored at the corresponding index in the results array. 
The counter is incremented, and if the counter becomes equal to the total number of functions, the Promise is resolved with the results array.

If any of the functions are rejected, the catch block is executed, and the Promise is rejected with the corresponding reason.

Solution TypeScript:
type Fn<T> = () => Promise<T>;

function promiseAll<T>(functions: Fn<T>[]): Promise<T[]> {
  return new Promise<T[]>((resolve, reject) => {
    if (functions.length === 0) {
      resolve([]);
    }

    const results: T[] = [];
    let completed = 0;

    functions.forEach((fn, index) => {
      fn()
        .then((result) => {
          results[index] = result;
          completed++;
          if (completed === functions.length) {
            resolve(results);
          }
        })
        .catch(reject);
    });
  });
}
return new Promise<T[]>((resolve, reject) => { ... }): This creates and returns a new Promise of type T[].

if (functions.length === 0) { resolve([]); }: If the input array of functions is empty, the function immediately resolves the Promise with an empty array.

The function initializes an array called results to store the resolved results and a variable completed to keep track of the number of completed functions.

The forEach loop iterates over each function in the functions array.

Inside the loop, each function is executed using fn(). If the Promise is resolved, the result is stored at the corresponding index in the results array.
The completed counter is incremented, and if it becomes equal to the total number of functions, the Promise is resolved with the results array.

If any of the Promises are rejected, the catch block is executed, and the Promise is rejected with the corresponding reason.

Link to problem:
https://leetcode.com/problems/execute-asynchronous-functions-in-parallel/description/?envType=study-plan-v2&envId=30-days-of-javascript
